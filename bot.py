from telegram import Bot, Update, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton, KeyboardButton
from telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler, MessageHandler, filters, CallbackQueryHandler, CallbackContext
import schedule, time, re, tracemalloc, logging
tracemalloc.start()
import uuid, threading
from datetime import datetime

import model.convert as convert, parsing.commex as commex, database.db as db, model.regexes as regexes, parsing.geo as geo, view.keyboards as keyboards, parsing.bitazza as bitazza, model.calc as calc, database.example as example

import database.get_message as get_message

from config import pills

BOT_TOKEN = pills

ADMIN_ID = [1194700554, 6920037183]
# ADMIN_ID = []
CHANEL_ID = 'channel4exchange_thai'

bat = {}
average_rub_user = {}
complete = {}
marje = None
marje = 1.03
usdt_marje = 1.03
cash_marje = 1.09

# user_course_THB = 100
user_course_THB = 35.6
user_course_rub = 91.1
admin_course_THB = 35.6
admin_course_rub = 91.1

# course_THB = 100
course_THB = 35.6
course_rub = 91.1


file_name = "course_THB_data.txt"


def parse_course(update: bool):

    new_course_rub = commex.get_average()
    global course_rub, course_THB, admin_course_rub, user_course_rub
    admin_course_rub = new_course_rub
    user_course_rub = new_course_rub
    course_rub = new_course_rub
    print("Average:", course_rub)

    new_course_THB = bitazza.get_currency()
    print("–ù–æ–≤—ã–π –∫—É—Ä—Å –±–∏—Ç–∞–∑–∑—ã: ", new_course_THB)
    if new_course_THB == 'error':
        print("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –±–∏—Ç–∞–∑–∑—ã")
        return
    global user_course_THB, admin_course_THB
    # if update is False:
    #     if(float(new_course_THB)<user_course_THB):
    #         user_course_THB = new_course_THB
    #     admin_course_THB = new_course_THB
    #     course_THB = new_course_THB
    # else:
    user_course_THB = new_course_THB
    admin_course_THB = new_course_THB
    course_THB = new_course_THB

    ###–ó–∞–ø–∏—Å—å –ª–æ–≥–æ–≤ –≤ —Ñ–∞–π–ª
    file = open(file_name, 'a')
    current_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    file.write(f"Date: {current_date}, course_THB: {course_THB}, admin_course_THB: {admin_course_THB}, user_course_THB: {user_course_THB}, course_THB: {course_THB}\n admin_course_rub: {admin_course_rub}, user_course_THB: {user_course_rub}\n")
    print("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ —Ñ–∞–π–ª:", file_name)
    file.close()
    print("–ö—É—Ä—Å —Å–µ–π—á–∞: ", course_THB)

##### –†–ê–°–ö–û–ú–ï–ù–¢–ò–†–û–í–ê–¢–¨
# thread_parse = threading.Thread(target=parse_course(True))
# thread_parse.start()

lock = threading.Lock()

def run_scheduler():
    # –ó–∞–ø—É—Å–∫ —à–µ–¥—É–ª–µ—Ä–∞ –∫–∞–∂–¥—ã–π —á–∞—Å

    ##### –†–ê–°–ö–û–ú–ï–ù–¢–ò–†–û–í–ê–¢–¨
    # schedule.every(1).hour.do(lambda: run_with_lock(parse_course, False))

    # schedule.every().day.at('10:00').do(lambda: run_with_lock(parse_course, True))

    # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —à–µ–¥—É–ª–µ—Ä–∞
    while True:
        schedule.run_pending()
        time.sleep(10)

def run_with_lock(func, arg):
    with lock:
        func(arg)

# –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ –¥–ª—è —à–µ–¥—É–ª–µ—Ä–∞
scheduler_thread = threading.Thread(target=run_scheduler)
scheduler_thread.start()

selected_user_id = None


logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

def count_thb_usdt_user(bat):
    global user_course_THB, usdt_marje
    return round(float((float(bat)/(float(round(user_course_THB, 2))*(2-usdt_marje)))),2)

def count_rub_marje(bat: int, trade: str, thb_course):
    global marje, course_rub, user_course_rub, user_course_THB, cash_marje

    if trade == 'üíµ –ù–∞–ª–∏—á–Ω—ã–µ':
        course_ruble = user_course_rub
        local_marje = float(cash_marje)

    elif trade == '‚ö™Ô∏è –î—Ä—É–≥–∏–µ –±–∞–Ω–∫–∏':
        course_ruble =  user_course_rub
        local_marje = marje

    elif trade == 'üü© USDT':
        course_ruble = user_course_rub
        local_marje = usdt_marje

    else:
        course_ruble = commex.get_by_trade_method(trade, bat, user_course_THB, user_course_rub, marje)
        local_marje = marje

    ## –ï—Å–ª–∏ –º—ã –Ω–µ —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ - —Ç–æ —Å—Ç–∞–≤–∏–º –æ–±—ã—á–Ω—ã–π —Å—Ä–µ–¥–Ω–∏–π –∫—É—Ä—Å
    if course_ruble == 'error' or course_ruble == 0 or course_ruble is None:
        course_ruble = course_rub

    usdt = (float(bat) / round(user_course_THB*(2-local_marje),2))

    ## –ö—É—Ä—Å –ë–∞—Ç—ã –∫ –†—É–±–ª—é
    thb_rub = round((course_ruble*local_marje)/(user_course_THB*(2-local_marje)),2)

    cruble = round((course_ruble*local_marje), 2)

    c_rub = round(float(cruble)/round(user_course_THB*(2-local_marje),2),2)
    rub = float(bat) * float(c_rub)


    ##–∫—É—Ä—Å –±–∞—Ç—ã —Å –º–∞—Ä–∂–æ–π
    c_thb = round(user_course_THB*(2-local_marje),2)

    # –ö—É—Ä—Å –†—É–±–ª—è –∫ –ë–∞—Ç–µ

    return round(usdt,2), round(rub,2), cruble, c_rub, c_thb

##### –ö–æ–º–∞–Ω–¥–∞ /user –¥–ª—è –∞–¥–º–∏–Ω–∞ ####
async def user_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if user_id in ADMIN_ID:
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = update.message.text.split('/user ')[1]
        global selected_user_id
        selected_user_id = user_id
        await update.message.reply_text(f'–í—ã–±—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º {selected_user_id}. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.')
    else:
        await update.message.reply_text('–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.')

##### –ö–æ–º–∞–Ω–¥–∞ /user –¥–ª—è –∞–¥–º–∏–Ω–∞ ####
async def new_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id

    if user_id in ADMIN_ID:
        text = update.message.text
        new_text = text.replace("/newtext", "")
        db.change_logo_text(new_text)



### –ö–æ–º–º–∞–Ω–¥–∞ –°—Ç–∞—Ä—Ç ###
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global user_course_rub, user_course_THB
    user_id = update.effective_user.id
    username = update.effective_user.username
    user_first_name = update.effective_user.first_name

    db.add_new_user(user_id, username, user_first_name)

    db.set_state(user_id, '0')
    db.set_bats(user_id, '0')

    ### –ê–¥–º–∏–Ω ###
    if user_id in ADMIN_ID:
        #admin panel
        await context.bot.send_message(chat_id=update.effective_chat.id, text=get_message.get_mess("hello_message", True), reply_markup=keyboards.get_admin_base())

    ### –Æ–∑–µ—Ä ###
    else:
        more_button = InlineKeyboardButton('–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏', callback_data="more_inf")

        reviews_button = InlineKeyboardButton('–ü—Ä–æ—á–∏—Ç–∞—Ç—å –æ—Ç–∑—ã–≤—ã', url=f"{db.get_review_link()}")

        keyboard = InlineKeyboardMarkup([[more_button], [reviews_button]])

        await context.bot.send_message(chat_id=update.effective_chat.id, text=db.get_logo_text(), reply_markup=keyboard)

        await context.bot.send_message(chat_id=update.effective_chat.id, text=get_message.get_mess('hello_message', False), reply_markup=keyboards.get_user_base())



### –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ####
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):

    global user_course_THB, course_THB, user_course_rub, course_rub, usdt_marje, cash_marje, marje, admin_course_rub, admin_course_THB

    text = update.message.text
    global selected_user_id
    user_id = update.effective_user.id
    if user_id in ADMIN_ID:

        if text == '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
            await context.bot.send_message(chat_id=update.effective_chat.id, text='–ù–∞ –≥–ª–∞–≤–Ω—É—é', reply_markup=keyboards.get_admin_base())

        if text == '–ó–∞–∫–∞–∑—ã':
            await context.bot.send_message(chat_id=update.effective_chat.id, text="–ó–∞–∫–∞–∑—ã:", reply_markup=keyboards.get_admin_orders())

        ### –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–† ###
        if text == '–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä':
            await context.bot.send_message(chat_id=update.effective_chat.id, text="–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä:", reply_markup=keyboards.get_admin_calculate())


        ##–î–ª—è –∞–¥–º–∏–Ω–æ–≤
        if text == "–£–∑–Ω–∞—Ç—å –∫—É—Ä—Å":
            await context.bot.send_message(chat_id=update.effective_chat.id, text=f"–ö—É—Ä—Å —Å Bitazza USDT/THB  : {admin_course_THB} \n–ö—É—Ä—Å Bitazza –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞ –¥–µ–Ω—å: {user_course_THB} \n–ö—É—Ä—Å Bitazza —Å –ø—Ä–æ—Ü–µ–Ω—Ç–æ–º (0.02): {admin_course_THB*(2-0.02)} \n–ö—É—Ä—Å Bitazza –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å –º–∞—Ä–∂–æ–π)  : {user_course_THB*(2-marje)} \n\n–ö—É—Ä—Å —Ä—É–±–ª—è –∫ –±–∞—Ç—É: {round(admin_course_rub/admin_course_THB,2)}\n\n–ö—É—Ä—Å rub –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_course_rub} \n–ö—É—Ä—Å rub –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Å –º–∞—Ä–∂–æ–π): {round(user_course_rub*float(marje),2)} \n –ü—Ä–æ—Ü–µ–Ω—Ç –º–∞—Ä–∂–∏ –¥–ª—è –±–∞–Ω–∫–æ–∞ : {round((marje*100),2)} % || {marje} \n–ü—Ä–æ—Ü–µ–Ω—Ç –º–∞—Ä–∂–∏ –¥–ª—è USDT: {round(float(usdt_marje)*100, 2)} % || {usdt_marje}  \n–ü—Ä–æ—Ü–µ–Ω—Ç –º–∞—Ä–∂–∏ –ù–∞–ª–∏—á–∫–∞: {round(float(cash_marje)*100, 2)} % || {cash_marje}")
            return
        ##–î–ª—è –∞–¥–º–∏–Ω–æ–≤
        if text == "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–ø–∏—Å–∫—É —Å —é–∑–µ—Ä–æ–º":
            await context.bot.send_message(chat_id=update.effective_chat.id, text=f"–ü–µ—Ä–µ–∏—Å–∫–∞ —Å —é–∑–µ—Ä–æ–º {selected_user_id} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            selected_user_id = None
            return

        ##–î–ª—è –∞–¥–º–∏–Ω–æ–≤
        if selected_user_id:
            chat_id = db.find_chat_id(selected_user_id)

            if chat_id:
                await context.bot.send_message(chat_id=chat_id, text=f'–û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {text}')
            else:
                await context.bot.send_message(chat_id=update.effective_chat.id, text=f"–° —ç—Ç–∏–º {username} –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —á–∞—Ç")


    ### –î–ª—è —é–∑–µ—Ä–æ–≤ ###
    ##################
    if user_id not in ADMIN_ID:

        ### –î–ª—è —é–∑–µ—Ä–æ–≤ ###
        if text == "–£–∑–Ω–∞—Ç—å –∫—É—Ä—Å":

            course_rub_marje = float(user_course_rub)*float(marje)
            course_thb_marje = float(user_course_THB)*(2-float(marje))

            await context.bot.send_message(chat_id=update.effective_chat.id, text=f'''üè∑Ô∏è
–ö—É—Ä—Å THB = {round(float(course_rub_marje)/float(course_thb_marje),2)} RUB üá∑üá∫
–ö—É—Ä—Å USDT = {round(float(course_thb_marje), 2)} THB üáπüá≠

–ß—Ç–æ–±—ã —Ç–æ—á–Ω–µ–µ —É–∑–Ω–∞—Ç—å –∫—É—Ä—Å –≤—ã–±–µ—Ä–∏—Ç–µ c—É–º–º—É, —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –∏ –Ω–∞–∂–º–∏—Ç–µ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –∑–∞–∫–∞–∑, —á—Ç–æ–±—ã —Å–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º ''', reply_markup=keyboards.get_user_base())
            return

        elif db.get_state(user_id) == '–æ–∂–∏–¥–∞–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏':
            db.set_mark(complete[user_id], text)

            await context.bot.send_message(chat_id=update.effective_chat.id, text="–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –æ—Ü–µ–Ω–∫—É üëç", reply_markup=keyboards.get_user_base())

            db.set_state(user_id, '0')
            return

        if user_id in complete and complete[user_id] is not None:

             if text == '–ü–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É':
                db.set_state(user_id, '–æ–∂–∏–¥–∞–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏')
                await context.bot.send_message(chat_id=update.effective_chat.id, text='–û—Ü–µ–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –æ—Ç 1 –¥–æ 5 –±–∞–ª–ª–æ–≤', reply_markup=keyboards.get_user_marks())
                return

             if text == '–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤':
                db.set_state(user_id, '–æ–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞')
                await context.bot.send_message(chat_id=update.effective_chat.id, text='–ù–∞–ø–∏—à–∏–µ—Ç –æ—Ç–∑—ã–≤ –Ω–∞ –Ω–∞—à—É —Ä–∞–±–æ—Ç—É', reply_markup=None)
                return


        if text == "–°–≤–æ—è —Å—É–º–º–∞":
            await context.bot.send_message(chat_id=update.effective_chat.id, text=f"üòÑ–í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—É—é –í–∞–º —Å—É–º–º—É –≤ –±–∞—Ç–∞—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä, 15756 ‚¨áÔ∏è")
            return

        if text == "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π":
            geo_handler()
        if text == "–ù–µ –¥–µ–ª–∏—Ç—å—Å—è ‚õîÔ∏è":
            db.set_state(user_id, '0')
            await context.bot.send_message(chat_id=update.effective_chat.id, text=f"–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ ‚è±", reply_markup=keyboards.get_user_base())
            return

        ### –î–ª—è —é–∑–µ—Ä–æ–≤ ###
        if text == "üü∞ –í—ã–±—Ä–∞—Ç—å —Å—É–º–º—É":
            db.set_state(user_id, '0')

            await context.bot.send_message(chat_id=update.effective_chat.id, text=f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Å—É–º–º—É", reply_markup=keyboards.get_user_base())
            return

        ### –î–ª—è —é–∑–µ—Ä–æ–≤ ###
        ### –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Å—É–º–º—ã –∂–¥–µ–º –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–µ—Ä–µ—Ç —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã ###
        elif (db.get_state(user_id) == '–æ–∂–∏–¥–∞–Ω–∏–µ_–≤—ã–±–æ—Ä–∞_—Å–ø–æ—Å–æ–±–∞_–æ–ø–ª–∞—Ç—ã'):

            if text in db.get_banks('rus'):
                # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –±–∞—Ç—ã
                usdt, rub, crub, course_rub, course_THB = count_rub_marje(db.get_bats(user_id), text, float(user_course_THB)*(2-float(marje)))
                if text == 'üü© USDT':
                    usdt = count_thb_usdt_user(db.get_bats(user_id))

                average_rub_user[user_id] = crub
                # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–ó–∞–ø—Ä–æ—Å–∏—Ç—å"
                request_button = InlineKeyboardButton('–†–∞–∑–º–µ—Å—Ç–∏—Ç—å –∑–∞–∫–∞–∑ –∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–∞—Ä–æ–º', callback_data="request")

                txt = example.order_text(db.get_bats(user_id), text, course_THB, course_rub, rub, usdt)

                # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–æ–π "–ó–∞–ø—Ä–æ—Å–∏—Ç—å"
                keyboard = InlineKeyboardMarkup([[request_button]])
                await context.bot.send_message(chat_id=update.effective_chat.id, text=txt, reply_markup=keyboard)
                return

            if text == 'üü∞ –í—ã–±—Ä–∞—Ç—å —Å—É–º–º—É':
                db.set_state(user_id, '0')
                await context.bot.send_message(chat_id=update.effective_chat.id, text=f'üòÑ–í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—É—é –í–∞–º —Å—É–º–º—É –≤ –±–∞—Ç–∞—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä, 15756 ‚¨áÔ∏è', reply_markup=keyboards.get_user_base())
                return
            else:
                await context.bot.send_message(chat_id=update.effective_chat.id, text=f'ü™ô –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã \n–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º –≤—ã–≥–æ–¥–Ω–µ–µ –¥–ª—è –í–∞—Å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –∫—É—Ä—Å üìä')
                return


        elif text.isdigit():

            if db.get_state(user_id) == '–æ–∂–∏–¥–∞–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏':
                db.set_state(user_id, '0')
                return

            db.set_state(user_id, '–æ–∂–∏–¥–∞–Ω–∏–µ_–≤—ã–±–æ—Ä–∞_—Å–ø–æ—Å–æ–±–∞_–æ–ø–ª–∞—Ç—ã')
            db.set_bats(user_id, int(text))

            keyboard = ReplyKeyboardMarkup(keyboards.get_banks(), resize_keyboard=True)

            await context.bot.send_message(chat_id=update.effective_chat.id, text=f"ü™ô –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã \n–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º –≤—ã–≥–æ–¥–Ω–µ–µ –¥–ª—è –í–∞—Å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –∫—É—Ä—Å üìä", reply_markup=keyboard)

        else:
            if db.check_request:
                if selected_user_id != None:
                    sel_chat = db.find_chat_id(selected_user_id)
                    if update.effective_chat.id == int(sel_chat):
                        username = db.find_name(update.effective_chat.id)
                        await context.bot.send_message(chat_id=ADMIN_ID[0], text=f'–¢–µ–∫—Å—Ç –æ—Ç —é–∑–µ—Ä–∞ @{username}: {text}')

## –ö–Ω–æ–ø–∫–∞ "–ó–∞–ø—Ä–æ—Å–∏—Ç—å" ###
async def button_callback(update: Update, context: CallbackContext, *args, **kwargs):

    global admin_course_THB, admin_course_rub
    query = update.callback_query
    # –ü–æ–ª—É—á–∞–µ–º callback_data –∏–∑ –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–∏
    callback_data = update.callback_query.data


    if callback_data == 'more_inf':

        await context.bot.send_message(chat_id=query.message.chat_id, text=db.get_info_text(), parse_mode='Markdown', disable_web_page_preview=True)

    if callback_data == 'apply':
        ##–ú–µ–Ω—è–µ–º –∫–Ω–æ–ø–∫–∏###

        cancle_button = InlineKeyboardButton('–û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data="cancle")

        complete_button = InlineKeyboardButton("–í—ã–ø–æ–ª–Ω–µ–Ω", callback_data='complete')

        keyboard = InlineKeyboardMarkup([[cancle_button], [complete_button]])

        await context.bot.edit_message_reply_markup(chat_id=query.message.chat_id, message_id=query.message.message_id, reply_markup=keyboard)

        username, order_id = regexes.admin_apply_user_name(query.message.text)
        chat_id = db.get_chat_id(username)

        ## –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await context.bot.send_message(chat_id=chat_id, text=f'üí¨ –í–∞—à –∑–∞–∫–∞–∑ –≤–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É\n–î–∞–ª–µ–µ –¥–∏–∞–ª–æ–≥ –≤–µ–¥–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä @operator4exchange \n–í–∞—à ID –∑–∞–∫–∞–∑–∞: {order_id}\n–ï—Å–ª–∏ –≤—ã –∑–∞–∫—Ä—ã–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç username (@username), —Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞—à–µ–º—É –æ–ø–µ—Ä–∞—Ç–æ—Ä—É —Å–∞–º–∏')

        db.set_progress(order_id)

    if callback_data == 'complete':

        username, order_id = regexes.admin_apply_user_name(query.message.text)
        chat_id = db.get_chat_id(username)

        for id in ADMIN_ID:
            await context.bot.send_message(chat_id=id, text=f'–ó–∞–∫–∞–∑ {order_id} \n–î–ª—è @{username} \n–í—ã–ø–æ–ª–Ω–µ–Ω!', reply_markup=None)

        await context.bot.edit_message_reply_markup(chat_id=query.message.chat_id, message_id=query.message.message_id, reply_markup=None)

        url_button = InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤", url="https://t.me/channel4exchange_thai/20")
        board = InlineKeyboardMarkup([[url_button]])

        ## –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await context.bot.send_message(chat_id=chat_id, text=f'–í–∞—à ID –∑–∞–∫–∞–∑–∞: {order_id} –≤—ã–ø–æ–ª–Ω–µ–Ω! \n–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ –∏ –¥–æ–≤–µ—Ä–∏–µ ü§ù', reply_markup=keyboards.get_user_complete())

        await context.bot.send_message(chat_id=chat_id, text=f'–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –∫–∞–∫ –ø—Ä–æ—à–µ–ª –í–∞—à –∑–∞–∫–∞–∑ –∏ –æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ \n–¢–∞–∫ –º—ã —Å—Ç–∞–Ω–æ–≤–∏–º—Å—è –ª—É—á—à–µ –¥–ª—è –í–∞—Å üíö', reply_markup=board)

        complete[int(chat_id)] = order_id

        db.set_complete(order_id)

    if callback_data == 'cancle':

        username, order_id = regexes.admin_apply_user_name(query.message.text)
        chat_id = db.get_chat_id(username)

        for id in ADMIN_ID:
            await context.bot.send_message(chat_id=id, text=f'–ó–∞–∫–∞–∑ {order_id} \n–î–ª—è @{username} \n–û—Ç–º–µ–Ω–µ–Ω', reply_markup=None)

        await context.bot.edit_message_reply_markup(chat_id=query.message.chat_id, message_id=query.message.message_id, reply_markup=None)

        db.set_cancle(order_id)

    if callback_data == 'request':

        share_location_button = KeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∞–Ω–∫–æ–º–∞—Ç—ã –∏ —Å–æ–æ–±—â–∏—Ç—å —Å–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ üèß", request_location=True)
        select_amount_button = KeyboardButton("üü∞ –í—ã–±—Ä–∞—Ç—å —Å—É–º–º—É")
        no_button = KeyboardButton("–ù–µ –¥–µ–ª–∏—Ç—å—Å—è ‚õîÔ∏è")
        keyboard = ReplyKeyboardMarkup([[share_location_button], [no_button], [select_amount_button]], resize_keyboard=True)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –±–∞—Ç
        await context.bot.send_message(chat_id=query.message.chat_id, text="‚úÖ –í–∞—à –∑–∞–∫–∞–∑ —Ä–∞–∑–º–µ—â–µ–Ω \nüßë‚Äçüíª –û–ø–µ—Ä–∞—Ç–æ—Ä @operator4exchange —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ \n–ê –ø–æ–∫–∞ –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, –≥–¥–µ –±–ª–∏–∂–∞–π—à–∏–µ –±–∞–Ω–∫–æ–º–∞—Ç –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–∏—Ç—å –∫—É—Ä—å–µ—Ä—É –≥–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å, –æ—Ç–ø—Ä–∞–≤–∏–≤ —Å–≤–æ–µ —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ üåé\n\n–ï—Å–ª–∏ –≤—ã –∑–∞–∫—Ä—ã–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç username (@username), —Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞—à–µ–º—É –æ–ø–µ—Ä–∞—Ç–æ—Ä—É —Å–∞–º–∏", reply_markup=keyboard)

        ## –ü–∞—Ä—Å–∏–º –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–∞–≤—Ç–µ–ª—è –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        bat, rub, usdt, rub_thb, thb_usdt, trade_method = regexes.user_request(query.message.text)

        ## –ü–æ–ª—É—á–∞–µ–º —á–∏—Å—Ç—É —Ü–µ–Ω—É
        clean_count = convert.clean(bat, admin_course_THB, admin_course_rub)
        gain = float(rub)-float(clean_count)
        gain_bat = round(gain/ (admin_course_rub/admin_course_THB),2)
        gain_usdt = round(gain/admin_course_rub ,2)

        best_course, best_trade = commex.get_best(float(rub))

        ##–°–æ–∑–¥–∞–µ–º ID –∑–∞–∫–∞–∑–∞###
        ids = str(uuid.uuid4())

        if db.check_order_id(ids):
            ids = str(uuid.uuid4())

        user_want_usdt = 10

        mess = f'''
        ID –∑–∞–∫–∞–∑–∞: {ids}
@{query.from_user.username} –¥—É–º–∞–µ—Ç –ø–æ–ª—É—á–∏—Ç—å {bat} –±–∞—Ç —á–µ—Ä–µ–∑ {trade_method}

–ö—É—Ä—Å –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞: {rub_thb} ({thb_usdt} –±–∞—Ç/USDT ; {round(rub_thb*thb_usdt, 2)} —Ä—É–±/USDT)

–†–µ–∞–ª—å–Ω—ã–π –ö—É—Ä—Å: {round(admin_course_rub/admin_course_THB, 2)} ({admin_course_THB} –±–∞—Ç/USDT ; {admin_course_rub} —Ä—É–±/USDT)

–°—É–º–º–∞ –æ–ø–ª–∞—Ç—ã –∫–ª–∏–µ–Ω—Ç–æ–º: {rub} —Ä—É–±. –ª–∏–±–æ {round(rub/(thb_usdt*rub_thb), 2)} USDT

–°—É–º–º–∞ —Ä–µ–∞–ª—å–Ω–∞—è: {clean_count} —Ä—É–±. ({round(clean_count/admin_course_rub, 2)} USDT)

–ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å —ç—Ç–æ–≥–æ: {round(gain,2)} —Ä—É–± –∏–ª–∏ {round(gain_bat,2)} –±–∞—Ç  –∏–ª–∏ {round(gain_usdt, 2)} USDT

Bitazza –¥–ª—è –∞–¥–º–∏–Ω–∞: {admin_course_THB}

–°–∞–º—ã–π –≤—ã–≥–æ–¥–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–ª–∞—Ç–µ–∂–∞: {best_trade} {best_course} —Ä—É–±/USDT, {round(best_course/admin_course_THB, 2)} —Ä—É–±/–¢–ù–í'''

        db.request_on(query.message.chat_id)

        cancle_button = InlineKeyboardButton('–û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data="cancle")
        apply_button = InlineKeyboardButton('–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É', callback_data="apply")
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–æ–π "–ó–∞–ø—Ä–æ—Å–∏—Ç—å"
        keyboard = InlineKeyboardMarkup([[cancle_button], [apply_button]])

        for chat_id in ADMIN_ID:
            await context.bot.send_message(chat_id=chat_id, text=mess, reply_markup=keyboard)

        ### –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö ###
        db.create_order(ids, query.from_user.username, float(rub), clean_count, usdt, rub_thb, marje, gain, trade_method, bat, user_want_usdt)

    return True


async def handle_geo(update: Update, context: CallbackContext):
    location = update.message.location
    text = geo.geocoder(location.latitude, location.longitude, update.message.chat_id)
    for chat_id in ADMIN_ID:
        ### –¢–µ–∫—Å—Ç —Å –∞–¥—Ä–µ—Å–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ###
        await context.bot.send_message(chat_id=chat_id, text=text)
        ### –í—ã–≤–æ–¥–∏—Ç –∫–∞—Ä—Ç—É —Å –≥–µ–æ–ø–æ–∑–∏—Ü–∏–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ####
        await context.bot.send_location(chat_id=chat_id, longitude=location.longitude, latitude=location.latitude)


async def error_handler(update, context):
    # Log the error or handle it in some way
    print(f"An error occurred: {context.error}")

if __name__ == '__main__':
    application = ApplicationBuilder().token(BOT_TOKEN).build()

    application.add_handler(CallbackQueryHandler(button_callback))

    start_handler = CommandHandler('start', start)
    application.add_handler(start_handler)

    user_handler = CommandHandler('user', user_message)
    application.add_handler(user_handler)

    newtext_handler = CommandHandler('newtext', new_text_message)
    application.add_handler(newtext_handler)

    message_handler = MessageHandler(filters.TEXT, handle_message)
    application.add_handler(message_handler)

    geo_handler = MessageHandler(filters.LOCATION, handle_geo)
    application.add_handler(geo_handler)


    application.run_polling()
