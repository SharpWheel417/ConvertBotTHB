from telegram import Bot, Update, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton, KeyboardButton
from telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler, MessageHandler, filters, CallbackQueryHandler, CallbackContext
import schedule, time, re, tracemalloc, logging
tracemalloc.start()
import uuid, threading
from datetime import datetime
import functools
import asyncio
import concurrent.futures

import model.convert as convert, parsing.commex as commex, database.db as db, model.regexes as regexes, parsing.geo as geo, view.keyboards as keyboards, parsing.bitazza as bitazza

import view.calculate as calc
import database.get_message as get_message
import database.marje as mj
import database.course as c
import database.state as s
import parsing.parse as p

import view.marje as vm
import view.course as vc
import view.user_bank as vu
import view.stats as vs
import view.orders as vo
import view.changeCourse as vcc

from config import pills

BOT_TOKEN = pills

ADMIN_ID = [1194700554, 6920037183]
# ADMIN_ID = [1194700554]
# ADMIN_ID = []
CHANEL_ID = 'channel4exchange_thai'

selected_user_id = None

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

##### –ö–æ–º–∞–Ω–¥–∞ /user –¥–ª—è –∞–¥–º–∏–Ω–∞ ####
async def user_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if user_id in ADMIN_ID:
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = update.message.text.split('/user ')[1]
        global selected_user_id
        selected_user_id = user_id
        await update.message.reply_text(f'–í—ã–±—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º {selected_user_id}. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.')
    else:
        await update.message.reply_text('–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.')

##### –ö–æ–º–∞–Ω–¥–∞ /user –¥–ª—è –∞–¥–º–∏–Ω–∞ ####
async def new_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id

    if user_id in ADMIN_ID:
        text = update.message.text
        new_text = text.replace("/newtext", "")
        db.change_logo_text(new_text)



### –ö–æ–º–º–∞–Ω–¥–∞ –°—Ç–∞—Ä—Ç ###
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global user_course_rub, user_course_THB
    user_id = update.effective_user.id
    username = update.effective_user.username
    print(update._effective_chat.id)
    if update.effective_user.last_name is None:
        user_fio = update.effective_user.first_name
    else:
        user_fio = update.effective_user.first_name + " " + update.effective_user.last_name

    db.add_new_user(user_id, username, user_fio)

    s.set_state(user_id, '0')
    db.set_bats(user_id, '0')

    ### –ê–¥–º–∏–Ω ###
    if user_id in ADMIN_ID:
        #admin panel
        await context.bot.send_message(chat_id=update.effective_chat.id, text=get_message.get_mess("hello_message", True), reply_markup=keyboards.get_admin_base())

    ### –Æ–∑–µ—Ä ###
    else:
        more_button = InlineKeyboardButton('–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏', callback_data="more_inf")

        reviews_button = InlineKeyboardButton('–ü—Ä–æ—á–∏—Ç–∞—Ç—å –æ—Ç–∑—ã–≤—ã', url=f"{db.get_review_link()}")

        keyboard = InlineKeyboardMarkup([[more_button], [reviews_button]])

        await context.bot.send_message(chat_id=update.effective_chat.id, text=db.get_logo_text(), reply_markup=keyboard)

        await context.bot.send_message(chat_id=update.effective_chat.id, text=get_message.get_mess('hello_message', False), reply_markup=keyboards.get_user_base())



### –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ####
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):

    text = update.message.text
    global selected_user_id
    user_id = update.effective_user.id
    if user_id in ADMIN_ID:

        if text == '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
            await context.bot.send_message(chat_id=update.effective_chat.id, text='–ù–∞ –≥–ª–∞–≤–Ω—É—é', reply_markup=keyboards.get_admin_base())
            s.set_state(user_id, '0')

        if text == '–ó–∞–∫–∞–∑—ã':
            s.set_state(user_id, '–ó–∞–∫–∞–∑—ã')
            await context.bot.send_message(chat_id=update.effective_chat.id, text="–ó–∞–∫–∞–∑—ã:", reply_markup=keyboards.get_admin_orders())

        if text == '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
            s.set_state(user_id, '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
            await context.bot.send_message(chat_id=update.effective_chat.id, text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:", reply_markup=keyboards.get_admin_stats())


        if s.get_state(user_id) == "–ó–∞–∫–∞–∑—ã":
            await vo.get(text, update, context)

        if s.get_state(user_id) == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
            await vs.get(text, update, context)

        if s.get_state(user_id) == "–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä":
            await calc.calculate(text, user_id, update, context)

        ### –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–† ###
        if text == '–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä':
            await context.bot.send_message(chat_id=update.effective_chat.id, text="–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä:", reply_markup=keyboards.get_admin_calculate())
            s.set_state(user_id, '–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä')

        ##–î–ª—è –∞–¥–º–∏–Ω–æ–≤
        if text == "–£–∑–Ω–∞—Ç—å –∫—É—Ä—Å":
           await vc.get(update, context)

        ##–£–∑–Ω–∞—Ç—å –º–∞—Ä–∂—É –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
        if text == "–£–∑–Ω–∞—Ç—å –º–∞—Ä–∂—É":
           await vm.get_marge(update, context)

        if s.get_state(user_id) == '–∏–∑–º–µ–Ω–∏—Ç—å_–∫—É—Ä—Å_—Ä—É–±' or s.get_state(user_id) == '–∏–∑–º–µ–Ω–∏—Ç—å_–∫—É—Ä—Å_usdt':
            await vcc.changeCourse(text, s.get_state(user_id), update, context)

        if text == "–ò–∑–º–µ–Ω–∏—Ç—å –∫—É—Ä—Å" or text == "–ò–∑–º–µ–Ω–∏—Ç—å –∫—É—Ä—Å —Ä—É–±–ª—è" or text == "–ò–∑–º–µ–Ω–∏—Ç—å –∫—É—Ä—Å usdt":
            await vcc.main(text, update, context)


        ##–î–ª—è –∞–¥–º–∏–Ω–æ–≤
        if text == "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–ø–∏—Å–∫—É —Å —é–∑–µ—Ä–æ–º":
            await context.bot.send_message(chat_id=update.effective_chat.id, text=f"–ü–µ—Ä–µ–∏—Å–∫–∞ —Å —é–∑–µ—Ä–æ–º {selected_user_id} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            selected_user_id = None
            return

        ##–î–ª—è –∞–¥–º–∏–Ω–æ–≤
        if selected_user_id:
            chat_id = db.find_chat_id(selected_user_id)

            if chat_id:
                await context.bot.send_message(chat_id=chat_id, text=f'–û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {text}')
            else:
                await context.bot.send_message(chat_id=update.effective_chat.id, text=f"–° —ç—Ç–∏–º {username} –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —á–∞—Ç")


    ### –î–ª—è —é–∑–µ—Ä–æ–≤ ###
    ##################
    if user_id not in ADMIN_ID:

        ### –î–ª—è —é–∑–µ—Ä–æ–≤ ###
        if text == "–£–∑–Ω–∞—Ç—å –∫—É—Ä—Å":
            await vc.get_user(update, context)


        if s.get_state(user_id) == '–æ–∂–∏–¥–∞–Ω–∏–µ_–æ—Ü–µ–Ω–∫–∏':

             if text == '–ü–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É':
                s.set_state(user_id, '–æ–∂–∏–¥–∞–Ω–∏–µ_–æ—Ü–µ–Ω–∫–∏')
                await context.bot.send_message(chat_id=update.effective_chat.id, text='–û—Ü–µ–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –æ—Ç 1 –¥–æ 5 –±–∞–ª–ª–æ–≤', reply_markup=keyboards.get_user_marks())
                return

        elif s.get_state(user_id) == '–æ–∂–∏–¥–∞–Ω–∏–µ_–æ—Ü–µ–Ω–∫–∏':
            # db.set_mark(complete[user_id], text)

            await context.bot.send_message(chat_id=update.effective_chat.id, text="–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –æ—Ü–µ–Ω–∫—É üëç", reply_markup=keyboards.get_user_base())

            s.set_state(user_id, '0')
            return

        if text == "–°–≤–æ—è —Å—É–º–º–∞":
            await context.bot.send_message(chat_id=update.effective_chat.id, text=get_message.get_mess("my_sum", False))
            return

        if text == "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π":
            geo_handler()
        if text == "–ù–µ –¥–µ–ª–∏—Ç—å—Å—è ‚õîÔ∏è":
            s.set_state(user_id, '0')
            await context.bot.send_message(chat_id=update.effective_chat.id, text=get_message.get_mess("send_geo", False), reply_markup=keyboards.get_user_base())
            return

        ### –î–ª—è —é–∑–µ—Ä–æ–≤ ###
        if text == "üü∞ –í—ã–±—Ä–∞—Ç—å —Å—É–º–º—É":
            s.set_state(user_id, '0')
            await context.bot.send_message(chat_id=update.effective_chat.id, text=get_message.get_mess("take_sum", False), reply_markup=keyboards.get_user_base())
            return

        ### –î–ª—è —é–∑–µ—Ä–æ–≤ ###
        ### –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Å—É–º–º—ã –∂–¥–µ–º –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–µ—Ä–µ—Ç —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã ###
        elif (s.get_state(user_id) == '–æ–∂–∏–¥–∞–Ω–∏–µ_–≤—ã–±–æ—Ä–∞_—Å–ø–æ—Å–æ–±–∞_–æ–ø–ª–∞—Ç—ã'):
            await vu.get(text, update, context)

        elif text.isdigit():

            if s.get_state(user_id) == '–æ–∂–∏–¥–∞–Ω–∏–µ_–æ—Ü–µ–Ω–∫–∏':
                s.set_state(user_id, '0')
                # db.set_mark(user_id, text)
                await context.bot.send_message(chat_id=update.effective_chat.id, text=get_message.get_mess("thanks",False), reply_markup=keyboards.get_user_base())
                return



            s.set_state(user_id, '–æ–∂–∏–¥–∞–Ω–∏–µ_–≤—ã–±–æ—Ä–∞_—Å–ø–æ—Å–æ–±–∞_–æ–ø–ª–∞—Ç—ã')
            db.set_bats(user_id, float(text))

            keyboard = ReplyKeyboardMarkup(keyboards.get_banks(), resize_keyboard=True)

            await context.bot.send_message(chat_id=update.effective_chat.id, text=get_message.get_mess("please", False), reply_markup=keyboard)

        else:
            if db.check_request:
                if selected_user_id != None:
                    sel_chat = db.find_chat_id(selected_user_id)
                    if update.effective_chat.id == int(sel_chat):
                        username = db.find_name(update.effective_chat.id)
                        await context.bot.send_message(chat_id=ADMIN_ID[0], text=f'–¢–µ–∫—Å—Ç –æ—Ç —é–∑–µ—Ä–∞ @{username}: {text}')

## –ö–Ω–æ–ø–∫–∏ ###
async def button_callback(update: Update, context: CallbackContext, *args, **kwargs):

    global admin_course_THB, admin_course_rub
    query = update.callback_query
    # –ü–æ–ª—É—á–∞–µ–º callback_data –∏–∑ –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–∏
    callback_data = update.callback_query.data


    if callback_data == 'more_inf':

        await context.bot.send_message(chat_id=query.message.chat_id, text=db.get_info_text(), parse_mode='Markdown', disable_web_page_preview=True)

    if callback_data == 'apply':
        ##–ú–µ–Ω—è–µ–º –∫–Ω–æ–ø–∫–∏###

        cancle_button = InlineKeyboardButton('–û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data="cancle")

        complete_button = InlineKeyboardButton("–í—ã–ø–æ–ª–Ω–µ–Ω", callback_data='complete')

        keyboard = InlineKeyboardMarkup([[cancle_button], [complete_button]])

        await context.bot.edit_message_reply_markup(chat_id=query.message.chat_id, message_id=query.message.message_id, reply_markup=keyboard)

        username, order_id = regexes.admin_apply_user_name(query.message.text)
        chat_id = db.get_chat_id(username)

        txt = get_message.get_mess("take_order", False).format(order_id=order_id)

        ## –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await context.bot.send_message(chat_id=chat_id, text=txt)

        db.update_order(order_id, 'in_progress')

    if callback_data == 'complete':

        username, order_id = regexes.admin_apply_user_name(query.message.text)
        chat_id = db.get_chat_id(username)

        for id in ADMIN_ID:
            await context.bot.send_message(chat_id=id, text=f'–ó–∞–∫–∞–∑ {order_id} \n–î–ª—è @{username} \n–í—ã–ø–æ–ª–Ω–µ–Ω!', reply_markup=None)

        await context.bot.edit_message_reply_markup(chat_id=query.message.chat_id, message_id=query.message.message_id, reply_markup=None)

        url_button = InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤", url="https://t.me/channel4exchange_thai/20")
        board = InlineKeyboardMarkup([[url_button]])

        ## –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        txt = get_message.get_mess("ready", False).format(order_id=order_id)
        await context.bot.send_message(chat_id=chat_id, text=txt, reply_markup=keyboards.get_user_complete())

        await context.bot.send_message(chat_id=chat_id, text=get_message.get_mess("text_for_order", False), reply_markup=board)

        # complete[int(chat_id)] = order_id
        s.set_state(chat_id, '–æ–∂–∏–¥–∞–Ω–∏–µ_–æ—Ü–µ–Ω–∫–∏')
        db.update_order(order_id, 'completed')

    if callback_data == 'cancle':

        username, order_id = regexes.admin_apply_user_name(query.message.text)
        chat_id = db.get_chat_id(username)

        for id in ADMIN_ID:
            await context.bot.send_message(chat_id=id, text=f'–ó–∞–∫–∞–∑ {order_id} \n–î–ª—è @{username} \n–û—Ç–º–µ–Ω–µ–Ω', reply_markup=None)

        await context.bot.edit_message_reply_markup(chat_id=query.message.chat_id, message_id=query.message.message_id, reply_markup=None)

        db.update_order(order_id, 'cancle')


    ### –ö–Ω–æ–ø–∫–∞ "–ó–∞–ø—Ä–æ—Å–∏—Ç—å" ###
    if callback_data == 'request':


        ##–°–æ–∑–¥–∞–µ–º ID –∑–∞–∫–∞–∑–∞###
        ids = str(uuid.uuid4())
        # if db.check_order_id(ids):
        #     ids = str(uuid.uuid4())


        trade_method = re.search(r'–ø–æ –∫—É—Ä—Å—É\s+(.+)', query.message.text)
        if trade_method and trade_method.group(1) == 'üü© USDT':

            course, bat, usdt = regexes.user_request(trade_method, query.message.text)
            c_thb = c.get('thb')
            real_usdt = bat/c_thb
            gain_usdt = usdt - real_usdt
            gain_bat = gain_usdt*c_thb
            gain_rub = gain_usdt*c.get('rub')

            rub = bat*(c.get('rub')/c_thb)

            username = query.from_user.username
            if query.from_user.username is None:
                username = "--"+query.from_user.first_name+" "+query.from_user.last_name

            db.create_order(ids, username, query.message.chat_id, bat, rub, usdt, course, gain_rub, gain_usdt, trade_method.group(1))

            best_trade_method = commex.get_best(rub)
            txt = get_message.get_mess('order_usdt', True).format(id=ids,
                                                                username=username,
                                                                bat=bat,
                                                                client_course_thb=course,
                                                                real_course_thb=c_thb,

                                                                client_usdt=usdt,
                                                                real_usdt=round(real_usdt,2),
                                                                gain_bat=round(gain_bat,2),
                                                                gain_usdt=round(gain_usdt,2),
                                                                best_trade_method=best_trade_method[1],
                                                                best_course_rub=best_trade_method[0],
                                                                best_course_thb_rub="0")

        elif trade_method and trade_method.group(1) == 'üíµ –ù–∞–ª–∏—á–Ω—ã–µ':
            course_usdt, course_rub, bat, rub, usdt = regexes.user_request(trade_method, query.message.text)

            client_thb_rub = float(course_rub)/float(course_usdt)

            real_course_thb_rub = (c.get('rub')/c.get('thb'))
            real_rub = bat*real_course_thb_rub
            real_usdt = bat/c.get('thb')

            gain_rub = rub-round(real_rub,2)
            gain_usdt = usdt - round(real_usdt,2)

            best_trade_method = commex.get_best(rub)

            username = query.from_user.username
            if query.from_user.username is None:
                username = "--"+query.from_user.first_name+" "+query.from_user.last_name

            db.create_order(ids, username, query.message.chat_id, bat, rub, usdt, course_rub, gain_rub, gain_usdt, trade_method.group(1))

            txt = get_message.get_mess('order_cash', True).format(id=ids,
                                                                username=username,
                                                                bat=bat,
                                                                client_thb_rub=round(client_thb_rub,2),
                                                                client_rub=round(course_rub,2),
                                                                real_course_thb_rub=round(real_course_thb_rub,2),
                                                                real_course_rub=c.get('rub'),
                                                                rub=rub,
                                                                usdt=usdt,
                                                                real_rub=round(real_rub,2),
                                                                real_usdt=round(real_usdt,2),
                                                                gain_rub=round(gain_rub,2),
                                                                gain_usdt=round(gain_usdt,2),
                                                                course_thb=c.get('thb'),
                                                                best_trade=best_trade_method[1],
                                                                best_course_rub=best_trade_method[0])



        else:
            course, rub, bat = regexes.user_request(trade_method, query.message.text)
            usdt = rub/c.get('rub')

            real_rub = bat*(c.get('rub')/c.get('thb'))
            real_usdt = bat/c.get('thb')

            gain_rub = rub-real_rub
            gain_usdt = usdt-real_usdt

            best_trade_method = commex.get_best(rub)

            real_course_thb_rub = c.get('rub')/c.get('thb')

            username = query.from_user.username
            if query.from_user.username is None:
                if query.from_user.last_name is None:
                    username = "--"+query.from_user.first_name
                else:
                    username = "--"+query.from_user.first_name+" "+query.from_user.last_name


            db.create_order(ids, username, query.message.chat_id, bat, rub, usdt, course, gain_rub, gain_usdt, trade_method.group(1))

            txt = get_message.get_mess('order_bank', True).format(id=ids,
                                                                username=username,
                                                                bat=bat,
                                                                trade_method=trade_method.group(1),
                                                                client_course_rub=course,
                                                                client_course_thb_rub=course,
                                                                rub=round(rub,2),
                                                                usdt=round(usdt,2),
                                                                real_rub=round(real_rub,2),
                                                                real_usdt=round(real_usdt,2),
                                                                gain_rub=round(gain_rub,2),
                                                                real_course_thb_rub=round(real_course_thb_rub,2),
                                                                gain_usdt=round(gain_usdt,2),
                                                                c_thb=c.get('thb'),
                                                                best_trade={best_trade_method[0]},
                                                                best_course={best_trade_method[1]}
                                                                )

        db.request_on(query.message.chat_id)

        cancle_button = InlineKeyboardButton('–û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data="cancle")
        apply_button = InlineKeyboardButton('–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É', callback_data="apply")
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–æ–π "–ó–∞–ø—Ä–æ—Å–∏—Ç—å"
        keyboard = InlineKeyboardMarkup([[cancle_button], [apply_button]])

        await context.bot.send_message(chat_id=query.message.chat_id, text=get_message.get_mess("request_user", False), reply_markup=keyboards.request_user())

        for chat_id in ADMIN_ID:
            await context.bot.send_message(chat_id=chat_id, text=txt, reply_markup=keyboard)

    return True







##–û—Ç–ø—Ä–∞–≤–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
async def handle_geo(update: Update, context: CallbackContext):
    location = update.message.location
    text = geo.geocoder(location.latitude, location.longitude, update.message.chat_id)
    for chat_id in ADMIN_ID:
        ### –¢–µ–∫—Å—Ç —Å –∞–¥—Ä–µ—Å–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ###
        await context.bot.send_message(chat_id=chat_id, text=text)
        ### –í—ã–≤–æ–¥–∏—Ç –∫–∞—Ä—Ç—É —Å –≥–µ–æ–ø–æ–∑–∏—Ü–∏–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ####
        await context.bot.send_location(chat_id=chat_id, longitude=location.longitude, latitude=location.latitude)

############–ü–ê–†–°–ò–ù–ì
async def parse(update, context):
    user_id = update.effective_user.id
    if user_id in ADMIN_ID:

        thread = threading.Thread(target=p.parse_course)
        thread.start()

    else:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–í—ã –Ω–µ –∞–¥–º–∏–Ω")



async def runParser(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id in ADMIN_ID:
    ##### –†–ê–°–ö–û–ú–ï–ù–¢–ò–†–û–í–ê–¢–¨
        lock = threading.Lock()

        def run_scheduler():
            # –ó–∞–ø—É—Å–∫ —à–µ–¥—É–ª–µ—Ä–∞ –∫–∞–∂–¥—ã–π —á–∞—Å
            schedule.every(1).hour.do(lambda: run_with_lock(p.parse_course, False))

            # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —à–µ–¥—É–ª–µ—Ä–∞
            while True:
                schedule.run_pending()
                time.sleep(10)

        def run_with_lock(func, args):
            with lock:
                func(args)

        # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ –¥–ª—è —à–µ–¥—É–ª–µ—Ä–∞
        scheduler_thread = threading.Thread(target=run_scheduler)
        scheduler_thread.start()
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–ü–∞—Ä—Å–∏–Ω–≥ –∫–∞–∂–¥—ã–π —á–∞—Å –∑–∞–ø—É—â–µ–Ω!")


### –ò–ó–ú–ï–ù–ï–ù–ò–ï –ú–ê–†–ñ–ò
async def changeMarje(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id in ADMIN_ID:
        await vm.change_marje(update, context)

    else:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–í—ã –Ω–µ –∞–¥–º–∏–Ω")





async def error_handler(update, context):
    # Log the error or handle it in some way
    print(f"An error occurred: {context.error}")

if __name__ == '__main__':
    application = ApplicationBuilder().token(BOT_TOKEN).build()

    application.add_handler(CallbackQueryHandler(button_callback))

    start_handler = CommandHandler('start', start)
    application.add_handler(start_handler)

    ##–°—Ä–∞–∑—É –∂–µ –ø–∞—Ä—Å–∏–º –∫—É—Ä—Å

    parse_handler = CommandHandler('parse', parse)
    application.add_handler(parse_handler)

    ##–ó–∞–ø—É—Å–∫–∞–µ—Ç —à–µ–¥—É–ª–µ—Ä –∫–∞–∂–¥—ã–π —á–∞—Å –ø–∞—Ä—Å–∏–Ω–≥–∞
    run_handler = CommandHandler('run', runParser)
    application.add_handler(run_handler)

    ##–ó–∞–ø—É—Å–∫–∞–µ—Ç —à–µ–¥—É–ª–µ—Ä –∫–∞–∂–¥—ã–π —á–∞—Å –ø–∞—Ä—Å–∏–Ω–≥–∞
    change_marje_handler = CommandHandler('m', changeMarje)
    application.add_handler(change_marje_handler)

    ##–í—ã–±—Ä–∞—Ç—å —é–∑–µ—Ä–∞ –¥–ª—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏
    user_handler = CommandHandler('user', user_message)
    application.add_handler(user_handler)

    newtext_handler = CommandHandler('newtext', new_text_message)
    application.add_handler(newtext_handler)

    message_handler = MessageHandler(filters.TEXT, handle_message)
    application.add_handler(message_handler)

    ##–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π
    geo_handler = MessageHandler(filters.LOCATION, handle_geo)
    application.add_handler(geo_handler)


    application.run_polling()
